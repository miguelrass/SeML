/**
 * generated by Xtext 2.11.0
 */
package org.xtext.seml.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.seml.seML.Import;
import org.xtext.seml.seML.MainModel;
import org.xtext.seml.seML.Sentence;
import org.xtext.seml.services.SeMLGrammarAccess;

@SuppressWarnings("all")
public class SeMLFormatter extends AbstractFormatter2 {
  @Inject
  private SeMLGrammarAccess g;
  
  protected void _format(final MainModel mainModel, @Extension final IFormattableDocument document) {
    final Consumer<ISemanticRegion> _function = (ISemanticRegion k) -> {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.oneSpace();
      };
      document.append(document.prepend(k, _function_1), _function_2);
    };
    this.textRegionExtensions.regionFor(mainModel).keywords(",").forEach(_function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(mainModel).keyword("use"), _function_1);
    EList<Import> _imports = mainModel.getImports();
    for (final Import _import : _imports) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<Import>prepend(_import, _function_2);
    }
    EList<Sentence> _sentences = mainModel.getSentences();
    for (final Sentence sentence : _sentences) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.<Sentence>prepend(sentence, _function_3);
        final Consumer<ISemanticRegion> _function_4 = (ISemanticRegion k) -> {
          final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
            it.noSpace();
          };
          final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
            it.oneSpace();
          };
          document.append(document.prepend(k, _function_5), _function_6);
        };
        this.textRegionExtensions.regionFor(sentence).keywords(",").forEach(_function_4);
      }
    }
  }
  
  public void format(final Object mainModel, final IFormattableDocument document) {
    if (mainModel instanceof XtextResource) {
      _format((XtextResource)mainModel, document);
      return;
    } else if (mainModel instanceof MainModel) {
      _format((MainModel)mainModel, document);
      return;
    } else if (mainModel instanceof EObject) {
      _format((EObject)mainModel, document);
      return;
    } else if (mainModel == null) {
      _format((Void)null, document);
      return;
    } else if (mainModel != null) {
      _format(mainModel, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(mainModel, document).toString());
    }
  }
}
