/**
 * generated by Xtext 2.10.0
 */
package org.xtext.seml.scoping;

import com.google.common.base.Objects;
import com.google.common.base.Predicate;
import java.util.HashSet;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.xtext.seml.scoping.AbstractSeMLScopeProvider;
import org.xtext.seml.seML.Individual;
import org.xtext.seml.seML.MainModel;
import org.xtext.seml.seML.Relation;
import org.xtext.seml.seML.SeMLPackage;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class SeMLScopeProvider extends AbstractSeMLScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    String _name = context.eClass().getName();
    if (_name != null) {
      switch (_name) {
        case "MainModel":
          if ((Objects.equal(reference, SeMLPackage.Literals.RELATION__IND1) || Objects.equal(reference, SeMLPackage.Literals.ASSIGNMENT__IND))) {
            final HashSet<String> refList = new HashSet<String>();
            final Consumer<Relation> _function = (Relation r) -> {
              EList<Individual> _ind2 = r.getInd2();
              boolean _tripleNotEquals = (_ind2 != null);
              if (_tripleNotEquals) {
                final Consumer<Individual> _function_1 = (Individual i) -> {
                  refList.add(i.getName());
                };
                r.getInd2().forEach(_function_1);
              }
            };
            EcoreUtil2.<Relation>getAllContentsOfType(((MainModel) context), Relation.class).forEach(_function);
            IScope _scope = super.getScope(context, reference);
            final Predicate<IEObjectDescription> _function_1 = (IEObjectDescription it) -> {
              return (it.getEObjectOrProxy().eClass().getName().equals("StaticIndividual") || refList.contains(it.getName().toString()));
            };
            return new FilteringScope(_scope, _function_1);
          } else {
            return super.getScope(context, reference);
          }
        default:
          return super.getScope(context, reference);
      }
    } else {
      return super.getScope(context, reference);
    }
  }
}
