/*
 * generated by Xtext 2.10.0
 */
package org.xtext.seml.scoping

import org.xtext.seml.seML.Individual
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.emf.common.util.ECollections
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.xtext.seml.seML.MainModel
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.EcoreUtil2
import org.xtext.seml.seML.Relation
import java.util.HashSet
import org.xtext.seml.seML.StaticIndividual
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.FilteringScope
import org.xtext.seml.seML.SeMLPackage

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
 
class SeMLScopeProvider extends AbstractSeMLScopeProvider/*AbstractDeclarativeScopeProvider**/ {
	
	

	
	override getScope(EObject context, EReference reference){
		
		switch context.eClass.name {
			case "MainModel":{
				
				if(reference == SeMLPackage.Literals.RELATION__IND1 || reference == SeMLPackage.Literals.ASSIGNMENT__IND){

					//Add referenced individuals 
					val refList = new HashSet<String>();
					EcoreUtil2.getAllContentsOfType(context as MainModel, Relation).forEach[r | 
						if(r.ind2 !== null) r.ind2.forEach[i| refList.add(i.name)] ]
					
					//Get static and referenced individuals
					return new FilteringScope(super.getScope(context, reference), [
						getEObjectOrProxy.eClass.name.equals("StaticIndividual") || refList.contains(name.toString)
					])
					
				}else{
					return super.getScope(context, reference)
				}

				
			}
			/*case "ReferencedVariable": {
				var ReferencedVariable CONTEXT = context as ReferencedVariable
				var Assignment AssignParent //Returns the correspondent assignment eClass
				if(context.eContainer.eClass.name == "Assignment") {AssignParent=context.eContainer as Assignment}
				else {AssignParent=context.eContainer.eContainer as Assignment}
				
				if(reference.name == "owner"){//==================== Subcomponent Assignment Scoping (same component)
					return Scopes.scopeFor((AssignParent.eContainer as Component).subcomponents)
				}else{//================== Variable Assignment Scoping (same component [local] or from subcomponent)
		        	if(CONTEXT.owner == null){ //=================== Local variable
						return Scopes.scopeFor((AssignParent.eContainer as Component).properties)
		        	}else { //================================================================= Subcomponent Variable
		        		if(CONTEXT.owner.eResource == null) //====== Subcomponent does not exist (isProxy)
		        			return Scopes.scopeFor(emptyList)
		        		else // List all subcomponent variables
		        			return Scopes.scopeFor(CONTEXT.owner.type.properties)
		        	}
	        	}
			}
			*/
			default: return super.getScope(context, reference)
		} 	
	}

	/*def scope_Relation_ind1(Individual context, EReference reference) {	

			
		return Scopes.scopeFor(null)		
	}

	def scope_Relation_ind1(MainModel context, EReference reference) {	

			
		return Scopes.scopeFor(null)		
	}
	
	def scope_Literal_ind1(Individual context, EReference reference) {	

			
		return Scopes.scopeFor(null)		
	}*/
}
