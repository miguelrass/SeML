/*
 * generated by Xtext 2.10.0
 */
package org.xtext.seml.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.seml.seML.Characteristic;
import org.xtext.seml.seML.Component_Entity;
import org.xtext.seml.seML.Component_Event;
import org.xtext.seml.seML.Component_Process;
import org.xtext.seml.seML.Component_Property;
import org.xtext.seml.seML.Import;
import org.xtext.seml.seML.ImportModel;
import org.xtext.seml.seML.Individual;
import org.xtext.seml.seML.MainModel;
import org.xtext.seml.seML.MetaIndividual;
import org.xtext.seml.seML.ObjectProperty;
import org.xtext.seml.seML.Relation;
import org.xtext.seml.seML.SeMLPackage;
import org.xtext.seml.seML.UseCharacteristic;
import org.xtext.seml.services.SeMLGrammarAccess;

@SuppressWarnings("all")
public class SeMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SeMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SeMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SeMLPackage.CHARACTERISTIC:
				sequence_Characteristic(context, (Characteristic) semanticObject); 
				return; 
			case SeMLPackage.COMPONENT_ENTITY:
				sequence_Component_Entity(context, (Component_Entity) semanticObject); 
				return; 
			case SeMLPackage.COMPONENT_EVENT:
				sequence_Component_Event(context, (Component_Event) semanticObject); 
				return; 
			case SeMLPackage.COMPONENT_PROCESS:
				sequence_Component_Process(context, (Component_Process) semanticObject); 
				return; 
			case SeMLPackage.COMPONENT_PROPERTY:
				sequence_Component_Property(context, (Component_Property) semanticObject); 
				return; 
			case SeMLPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case SeMLPackage.IMPORT_MODEL:
				sequence_ImportModel(context, (ImportModel) semanticObject); 
				return; 
			case SeMLPackage.INDIVIDUAL:
				sequence_Individual(context, (Individual) semanticObject); 
				return; 
			case SeMLPackage.MAIN_MODEL:
				sequence_MainModel(context, (MainModel) semanticObject); 
				return; 
			case SeMLPackage.META_INDIVIDUAL:
				sequence_MetaIndividual(context, (MetaIndividual) semanticObject); 
				return; 
			case SeMLPackage.OBJECT_PROPERTY:
				sequence_ObjectProperty(context, (ObjectProperty) semanticObject); 
				return; 
			case SeMLPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case SeMLPackage.USE_CHARACTERISTIC:
				sequence_UseCharacteristic(context, (UseCharacteristic) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Characteristic returns Characteristic
	 *
	 * Constraint:
	 *     (name=IRI iri=STRING)
	 */
	protected void sequence_Characteristic(ISerializationContext context, Characteristic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.CHARACTERISTIC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.CHARACTERISTIC__NAME));
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.CHARACTERISTIC__IRI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.CHARACTERISTIC__IRI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCharacteristicAccess().getNameIRITerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCharacteristicAccess().getIriSTRINGTerminalRuleCall_2_0(), semanticObject.getIri());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component_Entity
	 *     Component_Entity returns Component_Entity
	 *
	 * Constraint:
	 *     (name=IRI iri=STRING)
	 */
	protected void sequence_Component_Entity(ISerializationContext context, Component_Entity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.COMPONENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.COMPONENT__IRI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.COMPONENT__IRI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponent_EntityAccess().getNameIRITerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getComponent_EntityAccess().getIriSTRINGTerminalRuleCall_2_0(), semanticObject.getIri());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component_Event
	 *     Component_Event returns Component_Event
	 *
	 * Constraint:
	 *     (name=IRI iri=STRING)
	 */
	protected void sequence_Component_Event(ISerializationContext context, Component_Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.COMPONENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.COMPONENT__IRI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.COMPONENT__IRI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponent_EventAccess().getNameIRITerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getComponent_EventAccess().getIriSTRINGTerminalRuleCall_2_0(), semanticObject.getIri());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component_Process
	 *     Component_Process returns Component_Process
	 *
	 * Constraint:
	 *     (name=IRI iri=STRING)
	 */
	protected void sequence_Component_Process(ISerializationContext context, Component_Process semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.COMPONENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.COMPONENT__IRI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.COMPONENT__IRI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponent_ProcessAccess().getNameIRITerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getComponent_ProcessAccess().getIriSTRINGTerminalRuleCall_2_0(), semanticObject.getIri());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Component returns Component_Property
	 *     Component_Property returns Component_Property
	 *
	 * Constraint:
	 *     (name=IRI iri=STRING)
	 */
	protected void sequence_Component_Property(ISerializationContext context, Component_Property semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.COMPONENT__NAME));
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.COMPONENT__IRI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.COMPONENT__IRI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getComponent_PropertyAccess().getNameIRITerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getComponent_PropertyAccess().getIriSTRINGTerminalRuleCall_2_0(), semanticObject.getIri());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns ImportModel
	 *     ImportModel returns ImportModel
	 *
	 * Constraint:
	 *     (components+=Component+ characteristics+=Characteristic* objectProperties+=ObjectProperty* metaIndividuals+=MetaIndividual*)
	 */
	protected void sequence_ImportModel(ISerializationContext context, ImportModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.IMPORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.IMPORT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sentence returns Individual
	 *     Individual returns Individual
	 *     AnyIndividual returns Individual
	 *
	 * Constraint:
	 *     (cls+=[Component|IRI] cls+=[Component|IRI]* name=IRI)
	 */
	protected void sequence_Individual(ISerializationContext context, Individual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns MainModel
	 *     MainModel returns MainModel
	 *
	 * Constraint:
	 *     (imports+=Import+ sentences+=Sentence*)
	 */
	protected void sequence_MainModel(ISerializationContext context, MainModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnyIndividual returns MetaIndividual
	 *     MetaIndividual returns MetaIndividual
	 *
	 * Constraint:
	 *     (cls+=STRING+ name=IRI iri=STRING)
	 */
	protected void sequence_MetaIndividual(ISerializationContext context, MetaIndividual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjectProperty returns ObjectProperty
	 *
	 * Constraint:
	 *     (name=IRI iri=STRING)
	 */
	protected void sequence_ObjectProperty(ISerializationContext context, ObjectProperty semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.OBJECT_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.OBJECT_PROPERTY__NAME));
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.OBJECT_PROPERTY__IRI) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.OBJECT_PROPERTY__IRI));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectPropertyAccess().getNameIRITerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjectPropertyAccess().getIriSTRINGTerminalRuleCall_2_0(), semanticObject.getIri());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sentence returns Relation
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     (instance1=[AnyIndividual|IRI] obj=[ObjectProperty|IRI] instance2=[AnyIndividual|IRI])
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.RELATION__INSTANCE1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.RELATION__INSTANCE1));
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.RELATION__OBJ) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.RELATION__OBJ));
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.RELATION__INSTANCE2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.RELATION__INSTANCE2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getInstance1AnyIndividualIRITerminalRuleCall_0_0_1(), semanticObject.getInstance1());
		feeder.accept(grammarAccess.getRelationAccess().getObjObjectPropertyIRITerminalRuleCall_1_0_1(), semanticObject.getObj());
		feeder.accept(grammarAccess.getRelationAccess().getInstance2AnyIndividualIRITerminalRuleCall_2_0_1(), semanticObject.getInstance2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Sentence returns UseCharacteristic
	 *     UseCharacteristic returns UseCharacteristic
	 *
	 * Constraint:
	 *     name=[Characteristic|IRI]
	 */
	protected void sequence_UseCharacteristic(ISerializationContext context, UseCharacteristic semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SeMLPackage.Literals.USE_CHARACTERISTIC__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SeMLPackage.Literals.USE_CHARACTERISTIC__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUseCharacteristicAccess().getNameCharacteristicIRITerminalRuleCall_1_0_1(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
