/*
 * generated by Xtext 2.10.0
 */
package org.xtext.seml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SeMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMainModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	MainModel | ImportModel;
		@Override public ParserRule getRule() { return rule; }
		
		//MainModel | ImportModel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MainModel
		public RuleCall getMainModelParserRuleCall_0() { return cMainModelParserRuleCall_0; }
		
		//ImportModel
		public RuleCall getImportModelParserRuleCall_1() { return cImportModelParserRuleCall_1; }
	}
	public class MainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.MainModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cSentencesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSentencesSentenceParserRuleCall_1_0 = (RuleCall)cSentencesAssignment_1.eContents().get(0);
		
		//MainModel:
		//	imports+=Import+
		//	sentences+=Sentence*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import+ sentences+=Sentence*
		public Group getGroup() { return cGroup; }
		
		//imports+=Import+
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//sentences+=Sentence*
		public Assignment getSentencesAssignment_1() { return cSentencesAssignment_1; }
		
		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_1_0() { return cSentencesSentenceParserRuleCall_1_0; }
	}
	public class ImportModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.ImportModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComponentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComponentsComponentParserRuleCall_0_0 = (RuleCall)cComponentsAssignment_0.eContents().get(0);
		private final Assignment cCharacteristicsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCharacteristicsCharacteristicParserRuleCall_1_0 = (RuleCall)cCharacteristicsAssignment_1.eContents().get(0);
		private final Assignment cObjectPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectPropertiesObjectPropertyParserRuleCall_2_0 = (RuleCall)cObjectPropertiesAssignment_2.eContents().get(0);
		private final Assignment cMetaIndividualsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetaIndividualsMetaIndividualParserRuleCall_3_0 = (RuleCall)cMetaIndividualsAssignment_3.eContents().get(0);
		
		//ImportModel:
		//	components+=Component+
		//	characteristics+=Characteristic*
		//	objectProperties+=ObjectProperty*
		//	metaIndividuals+=MetaIndividual*;
		@Override public ParserRule getRule() { return rule; }
		
		//components+=Component+ characteristics+=Characteristic* objectProperties+=ObjectProperty*
		//metaIndividuals+=MetaIndividual*
		public Group getGroup() { return cGroup; }
		
		//components+=Component+
		public Assignment getComponentsAssignment_0() { return cComponentsAssignment_0; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_0_0() { return cComponentsComponentParserRuleCall_0_0; }
		
		//characteristics+=Characteristic*
		public Assignment getCharacteristicsAssignment_1() { return cCharacteristicsAssignment_1; }
		
		//Characteristic
		public RuleCall getCharacteristicsCharacteristicParserRuleCall_1_0() { return cCharacteristicsCharacteristicParserRuleCall_1_0; }
		
		//objectProperties+=ObjectProperty*
		public Assignment getObjectPropertiesAssignment_2() { return cObjectPropertiesAssignment_2; }
		
		//ObjectProperty
		public RuleCall getObjectPropertiesObjectPropertyParserRuleCall_2_0() { return cObjectPropertiesObjectPropertyParserRuleCall_2_0; }
		
		//metaIndividuals+=MetaIndividual*
		public Assignment getMetaIndividualsAssignment_3() { return cMetaIndividualsAssignment_3; }
		
		//MetaIndividual
		public RuleCall getMetaIndividualsMetaIndividualParserRuleCall_3_0() { return cMetaIndividualsMetaIndividualParserRuleCall_3_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Sentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndividualParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUseCharacteristicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Sentence:
		//	Individual | Relation | UseCharacteristic;
		@Override public ParserRule getRule() { return rule; }
		
		//Individual | Relation | UseCharacteristic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Individual
		public RuleCall getIndividualParserRuleCall_0() { return cIndividualParserRuleCall_0; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
		
		//UseCharacteristic
		public RuleCall getUseCharacteristicParserRuleCall_2() { return cUseCharacteristicParserRuleCall_2; }
	}
	public class IndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Individual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClsComponentCrossReference_1_0 = (CrossReference)cClsAssignment_1.eContents().get(0);
		private final RuleCall cClsComponentIRITerminalRuleCall_1_0_1 = (RuleCall)cClsComponentCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIRITerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cControl000aKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Individual:
		//	'new' cls+=[Component|IRI]+ name=IRI '\n' //However, an individual cannot have #
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'new' cls+=[Component|IRI]+ name=IRI '\n'
		public Group getGroup() { return cGroup; }
		
		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//cls+=[Component|IRI]+
		public Assignment getClsAssignment_1() { return cClsAssignment_1; }
		
		//[Component|IRI]
		public CrossReference getClsComponentCrossReference_1_0() { return cClsComponentCrossReference_1_0; }
		
		//IRI
		public RuleCall getClsComponentIRITerminalRuleCall_1_0_1() { return cClsComponentIRITerminalRuleCall_1_0_1; }
		
		//name=IRI
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//IRI
		public RuleCall getNameIRITerminalRuleCall_2_0() { return cNameIRITerminalRuleCall_2_0; }
		
		//'\n'
		public Keyword getControl000aKeyword_3() { return cControl000aKeyword_3; }
	}
	public class UseCharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.UseCharacteristic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameCharacteristicCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameCharacteristicIRITerminalRuleCall_1_0_1 = (RuleCall)cNameCharacteristicCrossReference_1_0.eContents().get(1);
		private final Keyword cControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UseCharacteristic:
		//	'use' name=[Characteristic|IRI] '\n';
		@Override public ParserRule getRule() { return rule; }
		
		//'use' name=[Characteristic|IRI] '\n'
		public Group getGroup() { return cGroup; }
		
		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//name=[Characteristic|IRI]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Characteristic|IRI]
		public CrossReference getNameCharacteristicCrossReference_1_0() { return cNameCharacteristicCrossReference_1_0; }
		
		//IRI
		public RuleCall getNameCharacteristicIRITerminalRuleCall_1_0_1() { return cNameCharacteristicIRITerminalRuleCall_1_0_1; }
		
		//'\n'
		public Keyword getControl000aKeyword_2() { return cControl000aKeyword_2; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstance1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInstance1AnyIndividualCrossReference_0_0 = (CrossReference)cInstance1Assignment_0.eContents().get(0);
		private final RuleCall cInstance1AnyIndividualIRITerminalRuleCall_0_0_1 = (RuleCall)cInstance1AnyIndividualCrossReference_0_0.eContents().get(1);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjObjectPropertyCrossReference_1_0 = (CrossReference)cObjAssignment_1.eContents().get(0);
		private final RuleCall cObjObjectPropertyIRITerminalRuleCall_1_0_1 = (RuleCall)cObjObjectPropertyCrossReference_1_0.eContents().get(1);
		private final Assignment cInstance2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInstance2AnyIndividualCrossReference_2_0 = (CrossReference)cInstance2Assignment_2.eContents().get(0);
		private final RuleCall cInstance2AnyIndividualIRITerminalRuleCall_2_0_1 = (RuleCall)cInstance2AnyIndividualCrossReference_2_0.eContents().get(1);
		private final Keyword cControl000aKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Relation:
		//	instance1=[AnyIndividual|IRI] obj=[ObjectProperty|IRI] instance2=[AnyIndividual|IRI] '\n';
		@Override public ParserRule getRule() { return rule; }
		
		//instance1=[AnyIndividual|IRI] obj=[ObjectProperty|IRI] instance2=[AnyIndividual|IRI] '\n'
		public Group getGroup() { return cGroup; }
		
		//instance1=[AnyIndividual|IRI]
		public Assignment getInstance1Assignment_0() { return cInstance1Assignment_0; }
		
		//[AnyIndividual|IRI]
		public CrossReference getInstance1AnyIndividualCrossReference_0_0() { return cInstance1AnyIndividualCrossReference_0_0; }
		
		//IRI
		public RuleCall getInstance1AnyIndividualIRITerminalRuleCall_0_0_1() { return cInstance1AnyIndividualIRITerminalRuleCall_0_0_1; }
		
		//obj=[ObjectProperty|IRI]
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }
		
		//[ObjectProperty|IRI]
		public CrossReference getObjObjectPropertyCrossReference_1_0() { return cObjObjectPropertyCrossReference_1_0; }
		
		//IRI
		public RuleCall getObjObjectPropertyIRITerminalRuleCall_1_0_1() { return cObjObjectPropertyIRITerminalRuleCall_1_0_1; }
		
		//instance2=[AnyIndividual|IRI]
		public Assignment getInstance2Assignment_2() { return cInstance2Assignment_2; }
		
		//[AnyIndividual|IRI]
		public CrossReference getInstance2AnyIndividualCrossReference_2_0() { return cInstance2AnyIndividualCrossReference_2_0; }
		
		//IRI
		public RuleCall getInstance2AnyIndividualIRITerminalRuleCall_2_0_1() { return cInstance2AnyIndividualIRITerminalRuleCall_2_0_1; }
		
		//'\n'
		public Keyword getControl000aKeyword_3() { return cControl000aKeyword_3; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponent_ProcessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponent_EventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponent_PropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cComponent_EntityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Component:
		//	Component_Process | Component_Event | Component_Property | Component_Entity;
		@Override public ParserRule getRule() { return rule; }
		
		//Component_Process | Component_Event | Component_Property | Component_Entity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Component_Process
		public RuleCall getComponent_ProcessParserRuleCall_0() { return cComponent_ProcessParserRuleCall_0; }
		
		//Component_Event
		public RuleCall getComponent_EventParserRuleCall_1() { return cComponent_EventParserRuleCall_1; }
		
		//Component_Property
		public RuleCall getComponent_PropertyParserRuleCall_2() { return cComponent_PropertyParserRuleCall_2; }
		
		//Component_Entity
		public RuleCall getComponent_EntityParserRuleCall_3() { return cComponent_EntityParserRuleCall_3; }
	}
	public class AnyIndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.AnyIndividual");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIndividualParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMetaIndividualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnyIndividual:
		//	Individual | MetaIndividual;
		@Override public ParserRule getRule() { return rule; }
		
		//Individual | MetaIndividual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Individual
		public RuleCall getIndividualParserRuleCall_0() { return cIndividualParserRuleCall_0; }
		
		//MetaIndividual
		public RuleCall getMetaIndividualParserRuleCall_1() { return cMetaIndividualParserRuleCall_1; }
	}
	public class Component_ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Component_Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIRITerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//Component_Process:
		//	'CompProcess' name=IRI iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'CompProcess' name=IRI iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'CompProcess'
		public Keyword getCompProcessKeyword_0() { return cCompProcessKeyword_0; }
		
		//name=IRI
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IRI
		public RuleCall getNameIRITerminalRuleCall_1_0() { return cNameIRITerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class Component_EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Component_Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIRITerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//Component_Event:
		//	'CompEvent' name=IRI iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'CompEvent' name=IRI iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'CompEvent'
		public Keyword getCompEventKeyword_0() { return cCompEventKeyword_0; }
		
		//name=IRI
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IRI
		public RuleCall getNameIRITerminalRuleCall_1_0() { return cNameIRITerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class Component_PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Component_Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIRITerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//Component_Property:
		//	'CompProperty' name=IRI iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'CompProperty' name=IRI iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'CompProperty'
		public Keyword getCompPropertyKeyword_0() { return cCompPropertyKeyword_0; }
		
		//name=IRI
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IRI
		public RuleCall getNameIRITerminalRuleCall_1_0() { return cNameIRITerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class Component_EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Component_Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIRITerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//Component_Entity:
		//	'CompEntity' name=IRI iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'CompEntity' name=IRI iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'CompEntity'
		public Keyword getCompEntityKeyword_0() { return cCompEntityKeyword_0; }
		
		//name=IRI
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IRI
		public RuleCall getNameIRITerminalRuleCall_1_0() { return cNameIRITerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class ObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.ObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIRITerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//ObjectProperty:
		//	'ObjectProperty' name=IRI iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectProperty' name=IRI iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'ObjectProperty'
		public Keyword getObjectPropertyKeyword_0() { return cObjectPropertyKeyword_0; }
		
		//name=IRI
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IRI
		public RuleCall getNameIRITerminalRuleCall_1_0() { return cNameIRITerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class CharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Characteristic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacteristicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIRITerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//Characteristic:
		//	'Characteristic' name=IRI iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Characteristic' name=IRI iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'Characteristic'
		public Keyword getCharacteristicKeyword_0() { return cCharacteristicKeyword_0; }
		
		//name=IRI
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IRI
		public RuleCall getNameIRITerminalRuleCall_1_0() { return cNameIRITerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class MetaIndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.MetaIndividual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaIndividualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cClsSTRINGTerminalRuleCall_1_0 = (RuleCall)cClsAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIRITerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cIriAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIriSTRINGTerminalRuleCall_3_0 = (RuleCall)cIriAssignment_3.eContents().get(0);
		
		//MetaIndividual:
		//	'MetaIndividual' cls+=STRING+ name=IRI iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'MetaIndividual' cls+=STRING+ name=IRI iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'MetaIndividual'
		public Keyword getMetaIndividualKeyword_0() { return cMetaIndividualKeyword_0; }
		
		//cls+=STRING+
		public Assignment getClsAssignment_1() { return cClsAssignment_1; }
		
		//STRING
		public RuleCall getClsSTRINGTerminalRuleCall_1_0() { return cClsSTRINGTerminalRuleCall_1_0; }
		
		//name=IRI
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//IRI
		public RuleCall getNameIRITerminalRuleCall_2_0() { return cNameIRITerminalRuleCall_2_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_3() { return cIriAssignment_3; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_3_0() { return cIriSTRINGTerminalRuleCall_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final MainModelElements pMainModel;
	private final ImportModelElements pImportModel;
	private final ImportElements pImport;
	private final SentenceElements pSentence;
	private final IndividualElements pIndividual;
	private final UseCharacteristicElements pUseCharacteristic;
	private final RelationElements pRelation;
	private final ComponentElements pComponent;
	private final AnyIndividualElements pAnyIndividual;
	private final Component_ProcessElements pComponent_Process;
	private final Component_EventElements pComponent_Event;
	private final Component_PropertyElements pComponent_Property;
	private final Component_EntityElements pComponent_Entity;
	private final ObjectPropertyElements pObjectProperty;
	private final CharacteristicElements pCharacteristic;
	private final MetaIndividualElements pMetaIndividual;
	private final TerminalRule tFLOAT;
	private final TerminalRule tBOOL;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tIRI;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public SeMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pMainModel = new MainModelElements();
		this.pImportModel = new ImportModelElements();
		this.pImport = new ImportElements();
		this.pSentence = new SentenceElements();
		this.pIndividual = new IndividualElements();
		this.pUseCharacteristic = new UseCharacteristicElements();
		this.pRelation = new RelationElements();
		this.pComponent = new ComponentElements();
		this.pAnyIndividual = new AnyIndividualElements();
		this.pComponent_Process = new Component_ProcessElements();
		this.pComponent_Event = new Component_EventElements();
		this.pComponent_Property = new Component_PropertyElements();
		this.pComponent_Entity = new Component_EntityElements();
		this.pObjectProperty = new ObjectPropertyElements();
		this.pCharacteristic = new CharacteristicElements();
		this.pMetaIndividual = new MetaIndividualElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.FLOAT");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.BOOL");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.SL_COMMENT");
		this.tIRI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.IRI");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.seml.SeML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	MainModel | ImportModel;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//MainModel:
	//	imports+=Import+
	//	sentences+=Sentence*;
	public MainModelElements getMainModelAccess() {
		return pMainModel;
	}
	
	public ParserRule getMainModelRule() {
		return getMainModelAccess().getRule();
	}
	
	//ImportModel:
	//	components+=Component+
	//	characteristics+=Characteristic*
	//	objectProperties+=ObjectProperty*
	//	metaIndividuals+=MetaIndividual*;
	public ImportModelElements getImportModelAccess() {
		return pImportModel;
	}
	
	public ParserRule getImportModelRule() {
		return getImportModelAccess().getRule();
	}
	
	//Import:
	//	'import' name=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Sentence:
	//	Individual | Relation | UseCharacteristic;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}
	
	//Individual:
	//	'new' cls+=[Component|IRI]+ name=IRI '\n' //However, an individual cannot have #
	//;
	public IndividualElements getIndividualAccess() {
		return pIndividual;
	}
	
	public ParserRule getIndividualRule() {
		return getIndividualAccess().getRule();
	}
	
	//UseCharacteristic:
	//	'use' name=[Characteristic|IRI] '\n';
	public UseCharacteristicElements getUseCharacteristicAccess() {
		return pUseCharacteristic;
	}
	
	public ParserRule getUseCharacteristicRule() {
		return getUseCharacteristicAccess().getRule();
	}
	
	//Relation:
	//	instance1=[AnyIndividual|IRI] obj=[ObjectProperty|IRI] instance2=[AnyIndividual|IRI] '\n';
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Component:
	//	Component_Process | Component_Event | Component_Property | Component_Entity;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//AnyIndividual:
	//	Individual | MetaIndividual;
	public AnyIndividualElements getAnyIndividualAccess() {
		return pAnyIndividual;
	}
	
	public ParserRule getAnyIndividualRule() {
		return getAnyIndividualAccess().getRule();
	}
	
	//Component_Process:
	//	'CompProcess' name=IRI iri=STRING;
	public Component_ProcessElements getComponent_ProcessAccess() {
		return pComponent_Process;
	}
	
	public ParserRule getComponent_ProcessRule() {
		return getComponent_ProcessAccess().getRule();
	}
	
	//Component_Event:
	//	'CompEvent' name=IRI iri=STRING;
	public Component_EventElements getComponent_EventAccess() {
		return pComponent_Event;
	}
	
	public ParserRule getComponent_EventRule() {
		return getComponent_EventAccess().getRule();
	}
	
	//Component_Property:
	//	'CompProperty' name=IRI iri=STRING;
	public Component_PropertyElements getComponent_PropertyAccess() {
		return pComponent_Property;
	}
	
	public ParserRule getComponent_PropertyRule() {
		return getComponent_PropertyAccess().getRule();
	}
	
	//Component_Entity:
	//	'CompEntity' name=IRI iri=STRING;
	public Component_EntityElements getComponent_EntityAccess() {
		return pComponent_Entity;
	}
	
	public ParserRule getComponent_EntityRule() {
		return getComponent_EntityAccess().getRule();
	}
	
	//ObjectProperty:
	//	'ObjectProperty' name=IRI iri=STRING;
	public ObjectPropertyElements getObjectPropertyAccess() {
		return pObjectProperty;
	}
	
	public ParserRule getObjectPropertyRule() {
		return getObjectPropertyAccess().getRule();
	}
	
	//Characteristic:
	//	'Characteristic' name=IRI iri=STRING;
	public CharacteristicElements getCharacteristicAccess() {
		return pCharacteristic;
	}
	
	public ParserRule getCharacteristicRule() {
		return getCharacteristicAccess().getRule();
	}
	
	//MetaIndividual:
	//	'MetaIndividual' cls+=STRING+ name=IRI iri=STRING;
	public MetaIndividualElements getMetaIndividualAccess() {
		return pMetaIndividual;
	}
	
	public ParserRule getMetaIndividualRule() {
		return getMetaIndividualAccess().getRule();
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	(INT '.' INT) (('e' | 'E') INT)?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal BOOL returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal IRI:
	//	'#' | '&'..';' | '?'..'Z' | 'a'..'z' | '_'+;
	public TerminalRule getIRIRule() {
		return tIRI;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
