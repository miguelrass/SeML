/*
 * generated by Xtext 2.11.0
 */
package org.xtext.seml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SeMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMainModelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportModelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	MainModel | ImportModel;
		@Override public ParserRule getRule() { return rule; }
		
		//MainModel | ImportModel
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MainModel
		public RuleCall getMainModelParserRuleCall_0() { return cMainModelParserRuleCall_0; }
		
		//ImportModel
		public RuleCall getImportModelParserRuleCall_1() { return cImportModelParserRuleCall_1; }
	}
	public class MainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.MainModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cUseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cUseChAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cUseChCharacteristicCrossReference_1_1_0 = (CrossReference)cUseChAssignment_1_1.eContents().get(0);
		private final RuleCall cUseChCharacteristicALIASTerminalRuleCall_1_1_0_1 = (RuleCall)cUseChCharacteristicCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cUseChAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cUseChCharacteristicCrossReference_1_2_1_0 = (CrossReference)cUseChAssignment_1_2_1.eContents().get(0);
		private final RuleCall cUseChCharacteristicALIASTerminalRuleCall_1_2_1_0_1 = (RuleCall)cUseChCharacteristicCrossReference_1_2_1_0.eContents().get(1);
		private final Assignment cSentencesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSentencesSentenceParserRuleCall_2_0 = (RuleCall)cSentencesAssignment_2.eContents().get(0);
		
		//MainModel:
		//	imports+=Import+ ('use' useCh+=[Characteristic|ALIAS] (',' useCh+=[Characteristic|ALIAS])*)?
		//	sentences+=Sentence*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=Import+ ('use' useCh+=[Characteristic|ALIAS] (',' useCh+=[Characteristic|ALIAS])*)? sentences+=Sentence*
		public Group getGroup() { return cGroup; }
		
		//imports+=Import+
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }
		
		//('use' useCh+=[Characteristic|ALIAS] (',' useCh+=[Characteristic|ALIAS])*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'use'
		public Keyword getUseKeyword_1_0() { return cUseKeyword_1_0; }
		
		//useCh+=[Characteristic|ALIAS]
		public Assignment getUseChAssignment_1_1() { return cUseChAssignment_1_1; }
		
		//[Characteristic|ALIAS]
		public CrossReference getUseChCharacteristicCrossReference_1_1_0() { return cUseChCharacteristicCrossReference_1_1_0; }
		
		//ALIAS
		public RuleCall getUseChCharacteristicALIASTerminalRuleCall_1_1_0_1() { return cUseChCharacteristicALIASTerminalRuleCall_1_1_0_1; }
		
		//(',' useCh+=[Characteristic|ALIAS])*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//useCh+=[Characteristic|ALIAS]
		public Assignment getUseChAssignment_1_2_1() { return cUseChAssignment_1_2_1; }
		
		//[Characteristic|ALIAS]
		public CrossReference getUseChCharacteristicCrossReference_1_2_1_0() { return cUseChCharacteristicCrossReference_1_2_1_0; }
		
		//ALIAS
		public RuleCall getUseChCharacteristicALIASTerminalRuleCall_1_2_1_0_1() { return cUseChCharacteristicALIASTerminalRuleCall_1_2_1_0_1; }
		
		//sentences+=Sentence*
		public Assignment getSentencesAssignment_2() { return cSentencesAssignment_2; }
		
		//Sentence
		public RuleCall getSentencesSentenceParserRuleCall_2_0() { return cSentencesSentenceParserRuleCall_2_0; }
	}
	public class ImportModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.ImportModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticIndividualsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStaticIndividualsStaticIndividualParserRuleCall_0_0 = (RuleCall)cStaticIndividualsAssignment_0.eContents().get(0);
		private final Assignment cIndividualOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndividualOptionsFreeIndividualParserRuleCall_1_0 = (RuleCall)cIndividualOptionsAssignment_1.eContents().get(0);
		private final Assignment cCharacteristicsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCharacteristicsCharacteristicParserRuleCall_2_0 = (RuleCall)cCharacteristicsAssignment_2.eContents().get(0);
		private final Assignment cObjectPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectPropertiesObjectPropertyParserRuleCall_3_0 = (RuleCall)cObjectPropertiesAssignment_3.eContents().get(0);
		
		//ImportModel:
		//	staticIndividuals+=StaticIndividual+
		//	individualOptions+=FreeIndividual*
		//	characteristics+=Characteristic*
		//	objectProperties+=ObjectProperty*;
		@Override public ParserRule getRule() { return rule; }
		
		//staticIndividuals+=StaticIndividual+ individualOptions+=FreeIndividual* characteristics+=Characteristic*
		//objectProperties+=ObjectProperty*
		public Group getGroup() { return cGroup; }
		
		//staticIndividuals+=StaticIndividual+
		public Assignment getStaticIndividualsAssignment_0() { return cStaticIndividualsAssignment_0; }
		
		//StaticIndividual
		public RuleCall getStaticIndividualsStaticIndividualParserRuleCall_0_0() { return cStaticIndividualsStaticIndividualParserRuleCall_0_0; }
		
		//individualOptions+=FreeIndividual*
		public Assignment getIndividualOptionsAssignment_1() { return cIndividualOptionsAssignment_1; }
		
		//FreeIndividual
		public RuleCall getIndividualOptionsFreeIndividualParserRuleCall_1_0() { return cIndividualOptionsFreeIndividualParserRuleCall_1_0; }
		
		//characteristics+=Characteristic*
		public Assignment getCharacteristicsAssignment_2() { return cCharacteristicsAssignment_2; }
		
		//Characteristic
		public RuleCall getCharacteristicsCharacteristicParserRuleCall_2_0() { return cCharacteristicsCharacteristicParserRuleCall_2_0; }
		
		//objectProperties+=ObjectProperty*
		public Assignment getObjectPropertiesAssignment_3() { return cObjectPropertiesAssignment_3; }
		
		//ObjectProperty
		public RuleCall getObjectPropertiesObjectPropertyParserRuleCall_3_0() { return cObjectPropertiesObjectPropertyParserRuleCall_3_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Sentence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRelationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Sentence:
		//	Relation | Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//Relation | Assignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_0() { return cRelationParserRuleCall_0; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_1() { return cAssignmentParserRuleCall_1; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInd1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cInd1IndividualCrossReference_0_0 = (CrossReference)cInd1Assignment_0.eContents().get(0);
		private final RuleCall cInd1IndividualALIASTerminalRuleCall_0_0_1 = (RuleCall)cInd1IndividualCrossReference_0_0.eContents().get(1);
		private final Assignment cObjAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjObjectPropertyCrossReference_1_0 = (CrossReference)cObjAssignment_1.eContents().get(0);
		private final RuleCall cObjObjectPropertyALIASTerminalRuleCall_1_0_1 = (RuleCall)cObjObjectPropertyCrossReference_1_0.eContents().get(1);
		private final Assignment cInd2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cInd2IndividualCrossReference_2_0 = (CrossReference)cInd2Assignment_2.eContents().get(0);
		private final RuleCall cInd2IndividualALIASTerminalRuleCall_2_0_1 = (RuleCall)cInd2IndividualCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInd2Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cInd2IndividualCrossReference_3_1_0 = (CrossReference)cInd2Assignment_3_1.eContents().get(0);
		private final RuleCall cInd2IndividualALIASTerminalRuleCall_3_1_0_1 = (RuleCall)cInd2IndividualCrossReference_3_1_0.eContents().get(1);
		
		//Relation:
		//	ind1=[Individual|ALIAS] obj=[ObjectProperty|ALIAS] ind2+=[Individual|ALIAS] (',' ind2+=[Individual|ALIAS])*;
		@Override public ParserRule getRule() { return rule; }
		
		//ind1=[Individual|ALIAS] obj=[ObjectProperty|ALIAS] ind2+=[Individual|ALIAS] (',' ind2+=[Individual|ALIAS])*
		public Group getGroup() { return cGroup; }
		
		//ind1=[Individual|ALIAS]
		public Assignment getInd1Assignment_0() { return cInd1Assignment_0; }
		
		//[Individual|ALIAS]
		public CrossReference getInd1IndividualCrossReference_0_0() { return cInd1IndividualCrossReference_0_0; }
		
		//ALIAS
		public RuleCall getInd1IndividualALIASTerminalRuleCall_0_0_1() { return cInd1IndividualALIASTerminalRuleCall_0_0_1; }
		
		//obj=[ObjectProperty|ALIAS]
		public Assignment getObjAssignment_1() { return cObjAssignment_1; }
		
		//[ObjectProperty|ALIAS]
		public CrossReference getObjObjectPropertyCrossReference_1_0() { return cObjObjectPropertyCrossReference_1_0; }
		
		//ALIAS
		public RuleCall getObjObjectPropertyALIASTerminalRuleCall_1_0_1() { return cObjObjectPropertyALIASTerminalRuleCall_1_0_1; }
		
		//ind2+=[Individual|ALIAS]
		public Assignment getInd2Assignment_2() { return cInd2Assignment_2; }
		
		//[Individual|ALIAS]
		public CrossReference getInd2IndividualCrossReference_2_0() { return cInd2IndividualCrossReference_2_0; }
		
		//ALIAS
		public RuleCall getInd2IndividualALIASTerminalRuleCall_2_0_1() { return cInd2IndividualALIASTerminalRuleCall_2_0_1; }
		
		//(',' ind2+=[Individual|ALIAS])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//ind2+=[Individual|ALIAS]
		public Assignment getInd2Assignment_3_1() { return cInd2Assignment_3_1; }
		
		//[Individual|ALIAS]
		public CrossReference getInd2IndividualCrossReference_3_1_0() { return cInd2IndividualCrossReference_3_1_0; }
		
		//ALIAS
		public RuleCall getInd2IndividualALIASTerminalRuleCall_3_1_0_1() { return cInd2IndividualALIASTerminalRuleCall_3_1_0_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIndAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIndIndividualCrossReference_0_0 = (CrossReference)cIndAssignment_0.eContents().get(0);
		private final RuleCall cIndIndividualALIASTerminalRuleCall_0_0_1 = (RuleCall)cIndIndividualCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLiteralValueParserRuleCall_2_0 = (RuleCall)cLiteralAssignment_2.eContents().get(0);
		
		////Only for individuals of type Property
		//Assignment:
		//	ind=[Individual|ALIAS] '=' literal=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//ind=[Individual|ALIAS] '=' literal=Value
		public Group getGroup() { return cGroup; }
		
		//ind=[Individual|ALIAS]
		public Assignment getIndAssignment_0() { return cIndAssignment_0; }
		
		//[Individual|ALIAS]
		public CrossReference getIndIndividualCrossReference_0_0() { return cIndIndividualCrossReference_0_0; }
		
		//ALIAS
		public RuleCall getIndIndividualALIASTerminalRuleCall_0_0_1() { return cIndIndividualALIASTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//literal=Value
		public Assignment getLiteralAssignment_2() { return cLiteralAssignment_2; }
		
		//Value
		public RuleCall getLiteralValueParserRuleCall_2_0() { return cLiteralValueParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFloatValAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValFLOATTerminalRuleCall_0_1_0 = (RuleCall)cValAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolValAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValBOOLTerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cIntValAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringValAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		
		//Value:
		//	{FloatVal} val=FLOAT
		//	| {BoolVal} val=BOOL
		//	| {IntVal} val=INT
		//	| {StringVal} val=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{FloatVal} val=FLOAT | {BoolVal} val=BOOL | {IntVal} val=INT | {StringVal} val=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FloatVal} val=FLOAT
		public Group getGroup_0() { return cGroup_0; }
		
		//{FloatVal}
		public Action getFloatValAction_0_0() { return cFloatValAction_0_0; }
		
		//val=FLOAT
		public Assignment getValAssignment_0_1() { return cValAssignment_0_1; }
		
		//FLOAT
		public RuleCall getValFLOATTerminalRuleCall_0_1_0() { return cValFLOATTerminalRuleCall_0_1_0; }
		
		//{BoolVal} val=BOOL
		public Group getGroup_1() { return cGroup_1; }
		
		//{BoolVal}
		public Action getBoolValAction_1_0() { return cBoolValAction_1_0; }
		
		//val=BOOL
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//BOOL
		public RuleCall getValBOOLTerminalRuleCall_1_1_0() { return cValBOOLTerminalRuleCall_1_1_0; }
		
		//{IntVal} val=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//{IntVal}
		public Action getIntValAction_2_0() { return cIntValAction_2_0; }
		
		//val=INT
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_2_1_0() { return cValINTTerminalRuleCall_2_1_0; }
		
		//{StringVal} val=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{StringVal}
		public Action getStringValAction_3_0() { return cStringValAction_3_0; }
		
		//val=STRING
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }
		
		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_3_1_0() { return cValSTRINGTerminalRuleCall_3_1_0; }
	}
	public class IndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Individual");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFreeIndividualParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStaticIndividualParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Individual:
		//	FreeIndividual | StaticIndividual;
		@Override public ParserRule getRule() { return rule; }
		
		//FreeIndividual | StaticIndividual
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FreeIndividual
		public RuleCall getFreeIndividualParserRuleCall_0() { return cFreeIndividualParserRuleCall_0; }
		
		//StaticIndividual
		public RuleCall getStaticIndividualParserRuleCall_1() { return cStaticIndividualParserRuleCall_1; }
	}
	public class FreeIndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.FreeIndividual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFreeIndividualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameALIASTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//FreeIndividual:
		//	'FreeIndividual' name=ALIAS iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'FreeIndividual' name=ALIAS iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'FreeIndividual'
		public Keyword getFreeIndividualKeyword_0() { return cFreeIndividualKeyword_0; }
		
		//name=ALIAS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ALIAS
		public RuleCall getNameALIASTerminalRuleCall_1_0() { return cNameALIASTerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class ObjectPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.ObjectProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameALIASTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		////Optional Individual references
		//ObjectProperty:
		//	'ObjectProperty' name=ALIAS iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'ObjectProperty' name=ALIAS iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'ObjectProperty'
		public Keyword getObjectPropertyKeyword_0() { return cObjectPropertyKeyword_0; }
		
		//name=ALIAS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ALIAS
		public RuleCall getNameALIASTerminalRuleCall_1_0() { return cNameALIASTerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class CharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.Characteristic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacteristicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameALIASTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//Characteristic:
		//	'Characteristic' name=ALIAS iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Characteristic' name=ALIAS iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'Characteristic'
		public Keyword getCharacteristicKeyword_0() { return cCharacteristicKeyword_0; }
		
		//name=ALIAS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ALIAS
		public RuleCall getNameALIASTerminalRuleCall_1_0() { return cNameALIASTerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	public class StaticIndividualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.StaticIndividual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticIndividualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameALIASTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cIriAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIriSTRINGTerminalRuleCall_2_0 = (RuleCall)cIriAssignment_2.eContents().get(0);
		
		//StaticIndividual:
		//	'StaticIndividual' name=ALIAS iri=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'StaticIndividual' name=ALIAS iri=STRING
		public Group getGroup() { return cGroup; }
		
		//'StaticIndividual'
		public Keyword getStaticIndividualKeyword_0() { return cStaticIndividualKeyword_0; }
		
		//name=ALIAS
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ALIAS
		public RuleCall getNameALIASTerminalRuleCall_1_0() { return cNameALIASTerminalRuleCall_1_0; }
		
		//iri=STRING
		public Assignment getIriAssignment_2() { return cIriAssignment_2; }
		
		//STRING
		public RuleCall getIriSTRINGTerminalRuleCall_2_0() { return cIriSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final MainModelElements pMainModel;
	private final ImportModelElements pImportModel;
	private final ImportElements pImport;
	private final SentenceElements pSentence;
	private final RelationElements pRelation;
	private final AssignmentElements pAssignment;
	private final ValueElements pValue;
	private final IndividualElements pIndividual;
	private final FreeIndividualElements pFreeIndividual;
	private final ObjectPropertyElements pObjectProperty;
	private final CharacteristicElements pCharacteristic;
	private final StaticIndividualElements pStaticIndividual;
	private final TerminalRule tFLOAT;
	private final TerminalRule tBOOL;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tALIAS;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public SeMLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pMainModel = new MainModelElements();
		this.pImportModel = new ImportModelElements();
		this.pImport = new ImportElements();
		this.pSentence = new SentenceElements();
		this.pRelation = new RelationElements();
		this.pAssignment = new AssignmentElements();
		this.pValue = new ValueElements();
		this.pIndividual = new IndividualElements();
		this.pFreeIndividual = new FreeIndividualElements();
		this.pObjectProperty = new ObjectPropertyElements();
		this.pCharacteristic = new CharacteristicElements();
		this.pStaticIndividual = new StaticIndividualElements();
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.FLOAT");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.BOOL");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.SL_COMMENT");
		this.tALIAS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.ALIAS");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.seml.SeML.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.seml.SeML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//	MainModel | ImportModel;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//MainModel:
	//	imports+=Import+ ('use' useCh+=[Characteristic|ALIAS] (',' useCh+=[Characteristic|ALIAS])*)?
	//	sentences+=Sentence*;
	public MainModelElements getMainModelAccess() {
		return pMainModel;
	}
	
	public ParserRule getMainModelRule() {
		return getMainModelAccess().getRule();
	}
	
	//ImportModel:
	//	staticIndividuals+=StaticIndividual+
	//	individualOptions+=FreeIndividual*
	//	characteristics+=Characteristic*
	//	objectProperties+=ObjectProperty*;
	public ImportModelElements getImportModelAccess() {
		return pImportModel;
	}
	
	public ParserRule getImportModelRule() {
		return getImportModelAccess().getRule();
	}
	
	//Import:
	//	'import' name=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Sentence:
	//	Relation | Assignment;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}
	
	//Relation:
	//	ind1=[Individual|ALIAS] obj=[ObjectProperty|ALIAS] ind2+=[Individual|ALIAS] (',' ind2+=[Individual|ALIAS])*;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	////Only for individuals of type Property
	//Assignment:
	//	ind=[Individual|ALIAS] '=' literal=Value;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Value:
	//	{FloatVal} val=FLOAT
	//	| {BoolVal} val=BOOL
	//	| {IntVal} val=INT
	//	| {StringVal} val=STRING;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//Individual:
	//	FreeIndividual | StaticIndividual;
	public IndividualElements getIndividualAccess() {
		return pIndividual;
	}
	
	public ParserRule getIndividualRule() {
		return getIndividualAccess().getRule();
	}
	
	//FreeIndividual:
	//	'FreeIndividual' name=ALIAS iri=STRING;
	public FreeIndividualElements getFreeIndividualAccess() {
		return pFreeIndividual;
	}
	
	public ParserRule getFreeIndividualRule() {
		return getFreeIndividualAccess().getRule();
	}
	
	////Optional Individual references
	//ObjectProperty:
	//	'ObjectProperty' name=ALIAS iri=STRING;
	public ObjectPropertyElements getObjectPropertyAccess() {
		return pObjectProperty;
	}
	
	public ParserRule getObjectPropertyRule() {
		return getObjectPropertyAccess().getRule();
	}
	
	//Characteristic:
	//	'Characteristic' name=ALIAS iri=STRING;
	public CharacteristicElements getCharacteristicAccess() {
		return pCharacteristic;
	}
	
	public ParserRule getCharacteristicRule() {
		return getCharacteristicAccess().getRule();
	}
	
	//StaticIndividual:
	//	'StaticIndividual' name=ALIAS iri=STRING;
	public StaticIndividualElements getStaticIndividualAccess() {
		return pStaticIndividual;
	}
	
	public ParserRule getStaticIndividualRule() {
		return getStaticIndividualAccess().getRule();
	}
	
	//terminal FLOAT returns ecore::EDouble:
	//	INT '.' '0'..'9'+ (('e' | 'E') INT)?;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal BOOL returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal INT returns ecore::EInt:
	//	'-'? '0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	"//" !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ALIAS:
	//	'-'? ('A'..'Z' | 'a'..'z' | '*' | '_' | '.') ('A'..'Z' | 'a'..'z' | '0'..'9' | '-' | '*' | '_' | '.')*;
	public TerminalRule getALIASRule() {
		return tALIAS;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
