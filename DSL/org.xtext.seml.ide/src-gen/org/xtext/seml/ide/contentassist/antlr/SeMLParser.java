/*
 * generated by Xtext 2.10.0
 */
package org.xtext.seml.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.seml.ide.contentassist.antlr.internal.InternalSeMLParser;
import org.xtext.seml.services.SeMLGrammarAccess;

public class SeMLParser extends AbstractContentAssistParser {

	@Inject
	private SeMLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSeMLParser createParser() {
		InternalSeMLParser result = new InternalSeMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getSentenceAccess().getAlternatives(), "rule__Sentence__Alternatives");
					put(grammarAccess.getComponentAccess().getAlternatives(), "rule__Component__Alternatives");
					put(grammarAccess.getAnyIndividualAccess().getAlternatives(), "rule__AnyIndividual__Alternatives");
					put(grammarAccess.getMainModelAccess().getGroup(), "rule__MainModel__Group__0");
					put(grammarAccess.getImportModelAccess().getGroup(), "rule__ImportModel__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getIndividualAccess().getGroup(), "rule__Individual__Group__0");
					put(grammarAccess.getUseCharacteristicAccess().getGroup(), "rule__UseCharacteristic__Group__0");
					put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
					put(grammarAccess.getComponent_ProcessAccess().getGroup(), "rule__Component_Process__Group__0");
					put(grammarAccess.getComponent_EventAccess().getGroup(), "rule__Component_Event__Group__0");
					put(grammarAccess.getComponent_PropertyAccess().getGroup(), "rule__Component_Property__Group__0");
					put(grammarAccess.getComponent_EntityAccess().getGroup(), "rule__Component_Entity__Group__0");
					put(grammarAccess.getObjectPropertyAccess().getGroup(), "rule__ObjectProperty__Group__0");
					put(grammarAccess.getCharacteristicAccess().getGroup(), "rule__Characteristic__Group__0");
					put(grammarAccess.getMetaIndividualAccess().getGroup(), "rule__MetaIndividual__Group__0");
					put(grammarAccess.getMainModelAccess().getImportsAssignment_0(), "rule__MainModel__ImportsAssignment_0");
					put(grammarAccess.getMainModelAccess().getSentencesAssignment_1(), "rule__MainModel__SentencesAssignment_1");
					put(grammarAccess.getImportModelAccess().getComponentsAssignment_0(), "rule__ImportModel__ComponentsAssignment_0");
					put(grammarAccess.getImportModelAccess().getCharacteristicsAssignment_1(), "rule__ImportModel__CharacteristicsAssignment_1");
					put(grammarAccess.getImportModelAccess().getObjectPropertiesAssignment_2(), "rule__ImportModel__ObjectPropertiesAssignment_2");
					put(grammarAccess.getImportModelAccess().getMetaIndividualsAssignment_3(), "rule__ImportModel__MetaIndividualsAssignment_3");
					put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
					put(grammarAccess.getIndividualAccess().getClsAssignment_1(), "rule__Individual__ClsAssignment_1");
					put(grammarAccess.getIndividualAccess().getNameAssignment_2(), "rule__Individual__NameAssignment_2");
					put(grammarAccess.getUseCharacteristicAccess().getNameAssignment_1(), "rule__UseCharacteristic__NameAssignment_1");
					put(grammarAccess.getRelationAccess().getInstance1Assignment_0(), "rule__Relation__Instance1Assignment_0");
					put(grammarAccess.getRelationAccess().getObjAssignment_1(), "rule__Relation__ObjAssignment_1");
					put(grammarAccess.getRelationAccess().getInstance2Assignment_2(), "rule__Relation__Instance2Assignment_2");
					put(grammarAccess.getComponent_ProcessAccess().getNameAssignment_1(), "rule__Component_Process__NameAssignment_1");
					put(grammarAccess.getComponent_ProcessAccess().getIriAssignment_2(), "rule__Component_Process__IriAssignment_2");
					put(grammarAccess.getComponent_EventAccess().getNameAssignment_1(), "rule__Component_Event__NameAssignment_1");
					put(grammarAccess.getComponent_EventAccess().getIriAssignment_2(), "rule__Component_Event__IriAssignment_2");
					put(grammarAccess.getComponent_PropertyAccess().getNameAssignment_1(), "rule__Component_Property__NameAssignment_1");
					put(grammarAccess.getComponent_PropertyAccess().getIriAssignment_2(), "rule__Component_Property__IriAssignment_2");
					put(grammarAccess.getComponent_EntityAccess().getNameAssignment_1(), "rule__Component_Entity__NameAssignment_1");
					put(grammarAccess.getComponent_EntityAccess().getIriAssignment_2(), "rule__Component_Entity__IriAssignment_2");
					put(grammarAccess.getObjectPropertyAccess().getNameAssignment_1(), "rule__ObjectProperty__NameAssignment_1");
					put(grammarAccess.getObjectPropertyAccess().getIriAssignment_2(), "rule__ObjectProperty__IriAssignment_2");
					put(grammarAccess.getCharacteristicAccess().getNameAssignment_1(), "rule__Characteristic__NameAssignment_1");
					put(grammarAccess.getCharacteristicAccess().getIriAssignment_2(), "rule__Characteristic__IriAssignment_2");
					put(grammarAccess.getMetaIndividualAccess().getClsAssignment_1(), "rule__MetaIndividual__ClsAssignment_1");
					put(grammarAccess.getMetaIndividualAccess().getNameAssignment_2(), "rule__MetaIndividual__NameAssignment_2");
					put(grammarAccess.getMetaIndividualAccess().getIriAssignment_3(), "rule__MetaIndividual__IriAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalSeMLParser typedParser = (InternalSeMLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SeMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SeMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
