/**
 * generated by Xtext 2.10.0
 */
package org.xtext.seml.ui;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.ide.editor.syntaxcoloring.DefaultSemanticHighlightingCalculator;
import org.eclipse.xtext.ide.editor.syntaxcoloring.IHighlightedPositionAcceptor;
import org.eclipse.xtext.nodemodel.BidiTreeIterable;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.resource.EObjectAtOffsetHelper;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.editor.syntaxcoloring.DefaultHighlightingConfiguration;
import org.eclipse.xtext.util.CancelIndicator;
import org.xtext.seml.seML.StaticIndividual;
import org.xtext.seml.services.SeMLGrammarAccess;

@SuppressWarnings("all")
public class SeMLSemanticHighlightingCalculator extends DefaultSemanticHighlightingCalculator {
  @Inject
  private SeMLGrammarAccess ga;
  
  @Inject
  private EObjectAtOffsetHelper helper;
  
  @Override
  public void provideHighlightingFor(final XtextResource resource, final IHighlightedPositionAcceptor acceptor, final CancelIndicator cancelIndicator) {
    ICompositeNode rootNode = resource.getParseResult().getRootNode();
    BidiTreeIterable<INode> _asTreeIterable = rootNode.getAsTreeIterable();
    for (final INode node : _asTreeIterable) {
      {
        EObject _grammarElement = node.getGrammarElement();
        CrossReference _objObjectPropertyCrossReference_1_0 = this.ga.getRelationAccess().getObjObjectPropertyCrossReference_1_0();
        boolean _equals = Objects.equal(_grammarElement, _objObjectPropertyCrossReference_1_0);
        if (_equals) {
          acceptor.addPosition(node.getOffset(), node.getLength(), DefaultHighlightingConfiguration.KEYWORD_ID);
        }
        EObject _grammarElement_1 = node.getGrammarElement();
        if ((_grammarElement_1 instanceof CrossReference)) {
          final EObject target = this.helper.resolveElementAt(resource, node.getOffset());
          if ((target instanceof StaticIndividual)) {
            acceptor.addPosition(node.getOffset(), node.getLength(), DefaultHighlightingConfiguration.NUMBER_ID);
          }
        }
      }
    }
    super.provideHighlightingFor(resource, acceptor, cancelIndicator);
  }
}
