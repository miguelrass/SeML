/**
 * generated by Xtext 2.10.0
 */
package org.xtext.seml.ui.quickfix;

import com.google.common.base.Objects;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.rass.ontologies.MasterOntology;
import org.rass.restrictions.Problem;
import org.xtext.seml.seML.Assignment;
import org.xtext.seml.seML.BoolVal;
import org.xtext.seml.seML.FloatVal;
import org.xtext.seml.seML.Individual;
import org.xtext.seml.seML.IntVal;
import org.xtext.seml.seML.ObjectProperty;
import org.xtext.seml.seML.Relation;
import org.xtext.seml.seML.SeMLFactory;
import org.xtext.seml.seML.Sentence;
import org.xtext.seml.seML.StringVal;
import org.xtext.seml.validation.SeMLValidator;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
@SuppressWarnings("all")
public class SeMLQuickfixProvider extends DefaultQuickfixProvider {
  private final static String local_log = "Quickfix Log: ";
  
  public void fixModel(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final String local_log = "Smart Quickfix Log: ";
    acceptor.accept(issue, "Try to generate multiple solutions", "no description", null, new ISemanticModification() {
      @Override
      public void apply(final EObject element, final IModificationContext context) {
        while (true) {
          {
            HashSet<List<String>> _hashSet = new HashSet<List<String>>();
            SeMLValidator.CheckModelRestrictions(true, _hashSet);
            if ((SeMLValidator.nextProblem == null)) {
              System.out.println((local_log + "Done. No more solutions."));
              return;
            }
            SeMLQuickfixProvider.this.fixProblem(SeMLValidator.nextProblem.solutions.get(0));
          }
        }
      }
    });
  }
  
  /**
   * if(!mS.relationTriples.empty){
   * 
   * // Create and populate list with all the imported object properties' IRIs from the keywords file
   * val ArrayList<String> shortObjPropIRIList = new ArrayList<String>();
   * val objProperties = SeMLValidator.globalImportModel.objectProperties;
   * objProperties.forEach(o | shortObjPropIRIList.add(o.getName()));
   * 
   * // Create and populate list with all the imported meta individual IRIs from the keywords file, and normal individual IRIs
   * val ArrayList<String> shortAnyIndividualIRIList = new ArrayList<String>();
   * val anyIndividuals = new ArrayList<AnyIndividual>();
   * anyIndividuals.addAll(EcoreUtil2.getAllContentsOfType(SeMLValidator.globalMainModel, Individual));
   * anyIndividuals.addAll(EcoreUtil2.getAllContentsOfType(SeMLValidator.globalImportModel, MetaIndividual));
   * anyIndividuals.forEach(i | shortAnyIndividualIRIList.add(i.name));
   * 
   * //Iterate every relation and create it
   * for(var int i=0; i<mS.relationTriples.length; i+=3){
   * 
   * val int index1 = shortAnyIndividualIRIList.indexOf(mS.relationTriples.get(i));
   * val int index2 = shortObjPropIRIList.indexOf(mS.relationTriples.get(i+1));
   * val int index3 = shortAnyIndividualIRIList.indexOf(mS.relationTriples.get(i+2));
   * if(index1 == -1){ System.err.println(local_log + "Internal Error: First individual not found"); return;} //internal error
   * if(index2 == -1){ System.err.println(local_log + "Internal Error: Obj. Property not found"); return;} //internal error
   * if(index3 == -1){ System.err.println(local_log + "Internal Error: Second individual not found"); return;} //internal error
   * 
   * val Relation newRel = SeMLFactory.eINSTANCE.createRelation();
   * ///newRel.instance1 = anyIndividuals.get(index1);
   * newRel.obj = objProperties.get(index2);
   * ///newRel.instance2 = anyIndividuals.get(index3);
   * SeMLValidator.globalMainModel.sentences.add(newRel);
   * //Add relation to master ontology for forthcoming validations
   * MasterOntology.addRelation(newRel);
   * }
   * }
   * 
   * }
   */
  @Fix(SeMLValidator.FIX_PROBLEM)
  public void fixDispatcher(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final int no = Integer.parseInt(issue.getData()[1]);
    final Problem p = SeMLValidator.problems.get(issue.getData()[0]).get(no);
    for (final List<String> s : p.solutions) {
      this.throwFix(issue, acceptor, s);
    }
    boolean _equals = issue.getData()[2].equals("F");
    if (_equals) {
      this.fixModel(issue, acceptor);
    }
  }
  
  public void throwFix(final Issue issue, final IssueResolutionAcceptor acceptor, final List<String> sol) {
    String _string = sol.toString();
    String _plus = ("Add: " + _string);
    acceptor.accept(issue, _plus, "no description", null, new ISemanticModification() {
      @Override
      public void apply(final EObject element, final IModificationContext context) {
        SeMLQuickfixProvider.this.fixProblem(sol);
      }
    });
  }
  
  public void fixProblem(final List<String> sol) {
    int _length = ((Object[])Conversions.unwrapArray(sol, Object.class)).length;
    boolean _equals = (_length == 2);
    if (_equals) {
      final Assignment a = SeMLFactory.eINSTANCE.createAssignment();
      EObject _get = SeMLValidator.quickfixMap.get(sol.get(0));
      a.setInd(((Individual) _get));
      final String s1 = sol.get(1);
      final String ss1 = s1.substring(1);
      final SeMLFactory fac = SeMLFactory.eINSTANCE;
      String _string = Character.valueOf(sol.get(1).charAt(0)).toString();
      if (_string != null) {
        switch (_string) {
          case "s":
            final StringVal v = fac.createStringVal();
            v.setVal(ss1);
            a.setLiteral(v);
            break;
          case "b":
            final BoolVal v_1 = fac.createBoolVal();
            String _string_1 = Character.valueOf(s1.charAt(1)).toString();
            boolean _equals_1 = Objects.equal(_string_1, "t");
            v_1.setVal(_equals_1);
            a.setLiteral(v_1);
            break;
          case "f":
            final FloatVal v_2 = fac.createFloatVal();
            v_2.setVal(Double.parseDouble(ss1));
            a.setLiteral(v_2);
            break;
          case "i":
            final IntVal v_3 = fac.createIntVal();
            v_3.setVal(Integer.parseInt(ss1));
            a.setLiteral(v_3);
            break;
        }
      }
      SeMLValidator.globalMainModel.getSentences().add(a);
      MasterOntology.AddDPRelations(Arrays.<Assignment>asList(a));
    } else {
      EObject _get_1 = SeMLValidator.quickfixMap.get(sol.get(0));
      final Individual i1 = ((Individual) _get_1);
      EObject _get_2 = SeMLValidator.quickfixMap.get(sol.get(1));
      final ObjectProperty obj = ((ObjectProperty) _get_2);
      EList<Sentence> _sentences = SeMLValidator.globalMainModel.getSentences();
      for (final Sentence s : _sentences) {
        if ((s instanceof Relation)) {
          final Relation r = ((Relation) s);
          if (((r.getInd1() == i1) && (r.getObj() == obj))) {
            for (int i = 2; (i < ((Object[])Conversions.unwrapArray(sol, Object.class)).length); i++) {
              EObject _get_3 = SeMLValidator.quickfixMap.get(sol.get(i));
              r.getInd2().add(((Individual) _get_3));
            }
            MasterOntology.AddOPRelations(Arrays.<Relation>asList(r));
            return;
          }
        }
      }
      final Relation r_1 = SeMLFactory.eINSTANCE.createRelation();
      r_1.setInd1(i1);
      r_1.setObj(obj);
      for (int i = 2; (i < ((Object[])Conversions.unwrapArray(sol, Object.class)).length); i++) {
        EObject _get_3 = SeMLValidator.quickfixMap.get(sol.get(i));
        r_1.getInd2().add(((Individual) _get_3));
      }
      SeMLValidator.globalMainModel.getSentences().add(r_1);
      MasterOntology.AddOPRelations(Arrays.<Relation>asList(r_1));
    }
  }
}
